==== Modules: [Cogen cogen] [CogenCommon cogen.common] [CogenCore cogen.core] [CogenCoreCoroutine cogen.core.coroutine] [CogenCoreEvents cogen.core.events] [CogenCorePollers cogen.core.pollers] [CogenCoreQueue cogen.core.queue] [CogenCoreSchedulers cogen.core.schedulers] [CogenCoreSockets cogen.core.sockets] [CogenCoreUtil cogen.core.util] [CogenTest cogen.test] [CogenTestBase cogen.test.base] [CogenTestTest_queue cogen.test.test_queue] [CogenTestTest_sched cogen.test.test_sched] [CogenTestTest_socket cogen.test.test_socket] [CogenTestTest_timer cogen.test.test_timer] [CogenWeb cogen.web] [CogenWebAsync cogen.web.async] [CogenWebWsgi cogen.web.wsgi] ====
==== Methods: [#__init__ __init__] ====

= Class: Signal =

This will resume the coroutines that where paused with WaitForSignal.

Usage:

{{{
nr = yield events.Signal(name, value)
}}}

  - nr - the number of coroutines woken up

== Methods ==

=== __init__ ===
signature: __init__(self, name, value=None, recipients=0, **kws)

All the coroutines waiting for this object will be added back in the
active coroutine queue.


