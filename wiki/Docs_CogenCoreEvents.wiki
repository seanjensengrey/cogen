#summary cogen.core.events Documentation for trunk
#labels Documentation

==== Parent module: [Docs_CogenCore cogen.core] ====
==== Classes: [Docs_CogenCoreEventsAddcoro AddCoro] [Docs_CogenCoreEventsCall Call] [Docs_CogenCoreEventsConnectionclosed ConnectionClosed] [Docs_CogenCoreEventsConnectionerror ConnectionError] [Docs_CogenCoreEventsCoroutineexception CoroutineException] [Docs_CogenCoreEventsJoin Join] [Docs_CogenCoreEventsOperationtimeout OperationTimeout] [Docs_CogenCoreEventsSignal Signal] [Docs_CogenCoreEventsSleep Sleep] [Docs_CogenCoreEventsWaitforsignal WaitForSignal] ====

= Module: `events` =
Base events (coroutine operations) and coroutine exceptions.

== Classes ==

=== [Docs_CogenCoreEventsAddcoro AddCoro] ===
A operator for adding a coroutine in the scheduler.
Example:

{{{
yield events.AddCoro(some_coro, args=(), kwargs={})
}}}

This is similar to Call, but it doesn't pause the current coroutine.
See: [Docs_CogenCoreEventsOperation Operation]


=== [Docs_CogenCoreEventsCall Call] ===
This will pause the current coroutine, add a new coro in the scheduler and 
resume the callee when it returns. 

Usage:
{{{
result = yield events.Call(mycoro, args=(), kwargs={}, prio=priority.DEFAULT)
}}}

  * mycoro - the coroutine to add.
  * args, kwargs - params to call the coroutine with
  * if `prio` is set the new coroutine will be added in the top of the 
  scheduler queue
  
See: [Docs_CogenCoreEventsOperation Operation]


=== [Docs_CogenCoreEventsConnectionclosed ConnectionClosed] ===
Raised when the other peer has closed connection.


=== [Docs_CogenCoreEventsConnectionerror ConnectionError] ===
Raised when a socket has a error flag (in epoll or select)


=== [Docs_CogenCoreEventsCoroutineexception CoroutineException] ===
This is used intenally to carry exception state in the poller and 
scheduler.


=== [Docs_CogenCoreEventsJoin Join] ===
A operation for waiting on a coroutine. 
Example:

{{{
@coroutine
def coro_a():
    return_value = yield events.Join(ref)
    
    
@coroutine
def coro_b():
    yield "bla"
    raise StopIteration("some return value")

ref = scheduler.add(coro_b)
scheduler.add(coro_a)
}}}

This will pause the coroutine and resume it when the other coroutine 
(`ref` in the example) has died.


=== [Docs_CogenCoreEventsOperationtimeout OperationTimeout] ===
Raised when the timeout for a operation expires. The exception 
message will be the operation


=== [Docs_CogenCoreEventsSignal Signal] ===
This will resume the coroutines that where paused with WaitForSignal.

Usage:

{{{
nr = yield events.Signal(
    name, 
    value,
    prio=priority.DEFAULT
)
}}}

  * nr - the number of coroutines woken up
  * name - object that coroutines wait on, can be a string 
  * value - object that the waiting coros recieve when they are resumed.
  
See: [Docs_CogenCoreEventsOperation Operation]


=== [Docs_CogenCoreEventsSleep Sleep] ===
A operation to pausing the coroutine for a specified amount of time.

Usage:

{{{
yield events.Sleep(time_object)
}}}

  * time_object - a datetime or timedelta object, or a number of seconds
    
{{{
yield events.Sleep(timestamp=ts)
}}}

  * ts - a timestamp


=== [Docs_CogenCoreEventsWaitforsignal WaitForSignal] ===
The coroutine will resume when the same object is Signaled.

Eg:
{{{ 
value = yield events.WaitForSignal(
    name, 
    timeout=None, 
    weak_timeout=True,
    prio=priority.DEFAULT
)
}}}

  * name - a object to wait on, can use strings for this - string used to 
    wait is equal to the string used to signal.
  * value - a object sent with the signal. see: [Docs_CogenCoreEventsSignal Signal]
  
See: [Docs_CogenCoreEventsTimedoperation TimedOperation]



