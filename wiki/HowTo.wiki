#summary A better introduction

= cogen =

== How to define a coroutine ==

{{{
from cogen.core.coroutines import coroutine
from cogen.core.schedulers import Scheduler
from cogen.core import events

@coroutine
def foo(param):
    yield events.Sleep(1)
    print param

sched = Scheduler()
sched.add(foo, args=('mumu',))
sched.run()
}}}

`coroutine` is a decorator that wraps the foo function in an special class that handles yields, errors and stuff.

`sched.run()` runs the cogen main loop. This call will block. `run` will return when all the corutines have stopped.

== How to call another coroutine from a coroutine ==

{{{
from cogen.core.coroutines import coroutine
from cogen.core.schedulers import Scheduler
from cogen.core import events

@coroutine
def foo():
    print 'foo called'
    result = yield bar("ham") # Note there is an `yield`
    print result

@coroutine
def bar(what):
    print 'bar called'
    raise StopIteration("spam, %s and eggs" % what)

sched = Scheduler() 
sched.add(foo)
sched.run()
}}}

Calls need to be made with yield.

== How to write a socket server ==

{{{
from cogen.core import sockets
from cogen.core import schedulers
from cogen.core.coroutines import coroutine
from cogen.core import proactors
import sys

@coroutine
def server():
    srv = sockets.Socket()
    adr = ('0.0.0.0', len(sys.argv)>1 and int(sys.argv[1]) or 1200)
    srv.bind(adr)
    srv.listen(64)
    while 1:
        print "Listening on", adr
        conn, addr = yield srv.accept()
        print "Connection from %s:%s" % addr
        m.add(handler, args=(conn, addr))

@coroutine
def handler(sock, addr):
    fh = sock.makefile()
    yield fh.write("WELCOME TO ECHO SERVER !\r\n")
    yield fh.flush()
        
    while 1:
        line = yield fh.readline(10)
        print `line`
        if line.strip() == 'exit':
            yield fh.write("GOOD BYE")
            yield fh.close()
            sock.close()
            return
        yield fh.write(line)
        yield fh.flush()

print 'Using:', proactors.DefaultProactor.__name__
m = schedulers.Scheduler()
m.add(server)
m.run()
}}}
