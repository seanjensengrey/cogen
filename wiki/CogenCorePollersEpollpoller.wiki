==== Modules: [Cogen cogen] [CogenCommon cogen.common] [CogenCore cogen.core] [CogenCoreCoroutine cogen.core.coroutine] [CogenCoreEvents cogen.core.events] [CogenCorePollers cogen.core.pollers] [CogenCoreQueue cogen.core.queue] [CogenCoreSchedulers cogen.core.schedulers] [CogenCoreSockets cogen.core.sockets] [CogenCoreUtil cogen.core.util] [CogenTest cogen.test] [CogenTestBase cogen.test.base] [CogenTestTest_queue cogen.test.test_queue] [CogenTestTest_sched cogen.test.test_sched] [CogenTestTest_socket cogen.test.test_socket] [CogenTestTest_timer cogen.test.test_timer] [CogenWeb cogen.web] [CogenWebAsync cogen.web.async] [CogenWebWsgi cogen.web.wsgi] ====
==== Methods: [#add add] [#handle_errored handle_errored] [#remove remove] [#run run] [#run_once run_once] [#run_operation run_operation] [#run_or_add run_or_add] [#waiting_op waiting_op] ====
==== Attributes: [#RESOLUTION RESOLUTION] [#mRESOLUTION mRESOLUTION] [#nRESOLUTION nRESOLUTION] ====

= Class: EpollPoller =



== Methods ==

=== add ===
signature: (self, op, coro)



=== handle_errored ===
signature: (self, desc)



=== remove ===
signature: (self, op, coro)



=== run ===
signature: (self, timeout=0)

Run a poller loop and return new socket events. Timeout is a timedelta 
object, 0 if active coros or None. 

epoll timeout param is a integer number of miliseconds (seconds/1000).

=== run_once ===
signature: (self, fdesc, waiting_ops)

Run a operation, remove it from the poller and return the result. 
Called from the main poller loop. 

=== run_operation ===
signature: (self, op)

Run the socket op and return result or exception. 

=== run_or_add ===
signature: (self, op, coro)

Perform operation or add the operation in the poller if socket isn't
ready. Called from the scheduller. 

=== waiting_op ===
signature: (self, testcoro)




== Attributes ==

=== RESOLUTION ===


{{{0.02}}}

=== mRESOLUTION ===


{{{20.0}}}

=== nRESOLUTION ===


{{{20000000.0}}}

