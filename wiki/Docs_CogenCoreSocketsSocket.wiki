#summary cogen.core.sockets.Socket Documentation for trunk
#labels Documentation

==== Parent module: [Docs_CogenCoreSockets cogen.core.sockets] ====
==== Methods: [#accept accept] [#bind bind] [#close close] [#connect connect] [#connect_ex connect_ex] [#dup dup] [#fileno fileno] [#getpeername getpeername] [#getsockname getsockname] [#getsockopt getsockopt] [#gettimeout gettimeout] [#listen listen] [#makefile makefile] [#read read] [#readall readall] [#readline readline] [#sendall sendall] [#setblocking setblocking] [#setsockopt setsockopt] [#settimeout settimeout] [#shutdown shutdown] [#write write] [#writeall writeall] ====
==== Attributes: [#family family] [#proto proto] [#recv recv] [#recv_into recv_into] [#recvfrom recvfrom] [#recvfrom_into recvfrom_into] [#send send] [#sendto sendto] [#type type] ====

= Class: Socket =

A wrapper for socket objects, sets nonblocking mode and
add some attributes we need:
  * rl_pending - for unchecked for linebreaks buffer
  * rl_list - for checked for linebreaks buffers
  * rl_list_sz - a cached size of the summed sizes of rl_list buffers

Regular calls to the usual socket methods return operations for use in a
coroutine.

== Methods ==

=== {{{accept}}} ===
signature: {{{accept(self)}}}



=== {{{bind}}} ===
signature: {{{bind(self, *args)}}}



=== {{{close}}} ===
signature: {{{close(self, *args)}}}



=== {{{connect}}} ===
signature: {{{connect(self, addr)}}}



=== {{{connect_ex}}} ===
signature: {{{connect_ex(self, *args)}}}

connect_ex(address) -> errno

This is like connect(address), but returns an error code (the errno value)
instead of raising an exception when an error occurs.

=== {{{dup}}} ===
signature: {{{dup(self)}}}

dup() -> socket object

Return a new socket object connected to the same system resource.

=== {{{fileno}}} ===
signature: {{{fileno(self)}}}



=== {{{getpeername}}} ===
signature: {{{getpeername(self)}}}



=== {{{getsockname}}} ===
signature: {{{getsockname(self, *args)}}}



=== {{{getsockopt}}} ===
signature: {{{getsockopt(self, *args)}}}

getsockopt(level, option[, buffersize]) -> value

Get a socket option.  See the Unix manual for level and option.
If a nonzero buffersize argument is given, the return value is a
string of that length; otherwise it is an integer.

=== {{{gettimeout}}} ===
signature: {{{gettimeout(self, *args)}}}



=== {{{listen}}} ===
signature: {{{listen(self, backlog)}}}



=== {{{makefile}}} ===
signature: {{{makefile(self, mode='r', bufsize=-1)}}}

makefile([mode[, bufsize]]) -> file object

Return a regular file object corresponding to the socket.  The mode
and bufsize arguments are as for the built-in open() function.

=== {{{read}}} ===
signature: {{{read(self, size)}}}



=== {{{readall}}} ===
signature: {{{readall(self, size)}}}



=== {{{readline}}} ===
signature: {{{readline(self, size)}}}



=== {{{sendall}}} ===
signature: {{{sendall(self, *args)}}}

sendall(data[, flags])

Send a data string to the socket.  For the optional flags
argument, see the Unix manual.  This calls send() repeatedly
until all data is sent.  If an error occurs, it's impossible
to tell how much data has been sent.

=== {{{setblocking}}} ===
signature: {{{setblocking(self, val)}}}



=== {{{setsockopt}}} ===
signature: {{{setsockopt(self, *args)}}}



=== {{{settimeout}}} ===
signature: {{{settimeout(self, to)}}}



=== {{{shutdown}}} ===
signature: {{{shutdown(self, *args)}}}



=== {{{write}}} ===
signature: {{{write(self, data)}}}



=== {{{writeall}}} ===
signature: {{{writeall(self, data)}}}




== Attributes ==

=== {{{family}}} ===

{{{<property object at 0x00B4ABC0>}}}

=== {{{proto}}} ===

{{{<property object at 0x00B4AC10>}}}

=== {{{recv}}} ===

{{{<member 'recv' of '_socketobject' objects>}}}

=== {{{recv_into}}} ===

{{{<member 'recv_into' of '_socketobject' objects>}}}

=== {{{recvfrom}}} ===

{{{<member 'recvfrom' of '_socketobject' objects>}}}

=== {{{recvfrom_into}}} ===

{{{<member 'recvfrom_into' of '_socketobject' objects>}}}

=== {{{send}}} ===

{{{<member 'send' of '_socketobject' objects>}}}

=== {{{sendto}}} ===

{{{<member 'sendto' of '_socketobject' objects>}}}

=== {{{type}}} ===

{{{<property object at 0x00B4ABE8>}}}

