#summary cogen.core.sockets.Socket Documentation for trunk
#labels Documentation

==== Parent module: [Docs_CogenCoreSockets cogen.core.sockets] ====
==== Methods: [#accept accept] [#bind bind] [#close close] [#connect connect] [#fileno fileno] [#getpeername getpeername] [#getsockname getsockname] [#gettimeout gettimeout] [#listen listen] [#read read] [#readall readall] [#readline readline] [#setblocking setblocking] [#setsockopt setsockopt] [#settimeout settimeout] [#shutdown shutdown] [#write write] [#writeall writeall] ====

= Class: Socket =

A wrapper for socket objects, sets nonblocking mode and
add some attributes we need:
  * rl_pending - for unchecked for linebreaks buffer
  * rl_list - for checked for linebreaks buffers
  * rl_list_sz - a cached size of the summed sizes of rl_list buffers

Regular calls to the usual socket methods return operations for use in a
coroutine.

== Methods ==

=== {{{accept}}} ===
signature: {{{accept(self)}}}



=== {{{bind}}} ===
signature: {{{bind(self, *args)}}}



=== {{{close}}} ===
signature: {{{close(self, *args)}}}



=== {{{connect}}} ===
signature: {{{connect(self, addr)}}}



=== {{{fileno}}} ===
signature: {{{fileno(self)}}}



=== {{{getpeername}}} ===
signature: {{{getpeername(self)}}}



=== {{{getsockname}}} ===
signature: {{{getsockname(self, *args)}}}



=== {{{gettimeout}}} ===
signature: {{{gettimeout(self, *args)}}}



=== {{{listen}}} ===
signature: {{{listen(self, backlog)}}}



=== {{{read}}} ===
signature: {{{read(self, size)}}}



=== {{{readall}}} ===
signature: {{{readall(self, size)}}}



=== {{{readline}}} ===
signature: {{{readline(self, size)}}}



=== {{{setblocking}}} ===
signature: {{{setblocking(self, val)}}}



=== {{{setsockopt}}} ===
signature: {{{setsockopt(self, *args)}}}



=== {{{settimeout}}} ===
signature: {{{settimeout(self, to)}}}



=== {{{shutdown}}} ===
signature: {{{shutdown(self, *args)}}}



=== {{{write}}} ===
signature: {{{write(self, data)}}}



=== {{{writeall}}} ===
signature: {{{writeall(self, data)}}}




