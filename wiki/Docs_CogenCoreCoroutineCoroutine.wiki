#summary cogen.core.coroutine.Coroutine Documentation for trunk
#labels Documentation

==== Parent module: [Docs_CogenCoreCoroutine cogen.core.coroutine] ====
==== Methods: [#add_waiter add_waiter] [#finalize finalize] [#handle_error handle_error] [#process process] [#remove_waiter remove_waiter] [#run_op run_op] ====
==== Attributes: [#STATE_COMPLETED STATE_COMPLETED] [#STATE_FAILED STATE_FAILED] [#STATE_FINALIZED STATE_FINALIZED] [#STATE_NEED_INIT STATE_NEED_INIT] [#STATE_RUNNING STATE_RUNNING] [#caller caller] [#coro coro] [#debug debug] [#exception exception] [#f_args f_args] [#f_kws f_kws] [#lastop lastop] [#name name] [#prio prio] [#result result] [#running running] [#state state] [#waiters waiters] ====

= Class: `Coroutine` =

We need a coroutine wrapper for generators and function alike because
we want to run functions that don't return generators just like a
coroutine.

== Methods ==

=== {{{add_waiter}}} ===
signature: {{{add_waiter(self, coro)}}}



=== {{{finalize}}} ===
signature: {{{finalize(self)}}}



=== {{{handle_error}}} ===
signature: {{{handle_error(self)}}}



=== {{{process}}} ===
signature: {{{process(self, sched, coro)}}}



=== {{{remove_waiter}}} ===
signature: {{{remove_waiter(self, coro)}}}



=== {{{run_op}}} ===
signature: {{{run_op(self, op)}}}

Handle the operation:
  * if coro is in STATE_RUNNING, send or throw the given op
  * if coro is in STATE_NEED_INIT, call the init function and if it 
  doesn't return a generator, set STATE_COMPLETED and set the result
  to whatever the function returned. 
    * if StopIteration is raised, set STATE_COMPLETED and return self.
    * if any other exception is raised, set STATE_FAILED, handle error
    or send it to the caller, return self

Return self is used as a optimization. Coroutine is also a Operation 
which handles it's own completion (resuming the caller and the waiters).


== Attributes ==

=== {{{STATE_COMPLETED}}} ===

{{{2}}}

=== {{{STATE_FAILED}}} ===

{{{3}}}

=== {{{STATE_FINALIZED}}} ===

{{{4}}}

=== {{{STATE_NEED_INIT}}} ===

{{{0}}}

=== {{{STATE_RUNNING}}} ===

{{{1}}}

=== {{{caller}}} ===

{{{<member 'caller' of 'Coroutine' objects>}}}

=== {{{coro}}} ===

{{{<member 'coro' of 'Coroutine' objects>}}}

=== {{{debug}}} ===

{{{<member 'debug' of 'Coroutine' objects>}}}

=== {{{exception}}} ===

{{{<member 'exception' of 'Coroutine' objects>}}}

=== {{{f_args}}} ===

{{{<member 'f_args' of 'Coroutine' objects>}}}

=== {{{f_kws}}} ===

{{{<member 'f_kws' of 'Coroutine' objects>}}}

=== {{{lastop}}} ===

{{{<member 'lastop' of 'Coroutine' objects>}}}

=== {{{name}}} ===

{{{<member 'name' of 'Coroutine' objects>}}}

=== {{{prio}}} ===

{{{<member 'prio' of 'Coroutine' objects>}}}

=== {{{result}}} ===

{{{<member 'result' of 'Coroutine' objects>}}}

=== {{{running}}} ===

{{{<property object at 0x00C79BC0>}}}

=== {{{state}}} ===

{{{<member 'state' of 'Coroutine' objects>}}}

=== {{{waiters}}} ===

{{{<member 'waiters' of 'Coroutine' objects>}}}

