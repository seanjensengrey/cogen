#labels Documentation
==== Modules: ====
  - [Cogen cogen]
  - [CogenCommon cogen.common]
  - [CogenCore cogen.core]
  - [CogenCoreCoroutine cogen.core.coroutine]
  - [CogenCoreEvents cogen.core.events]
  - [CogenCorePollers cogen.core.pollers]
  - [CogenCoreQueue cogen.core.queue]
  - [CogenCoreSchedulers cogen.core.schedulers]
  - [CogenCoreSockets cogen.core.sockets]
  - [CogenCoreUtil cogen.core.util]
  - [CogenTest cogen.test]
  - [CogenTestBase cogen.test.base]
  - [CogenTestTest_queue cogen.test.test_queue]
  - [CogenTestTest_sched cogen.test.test_sched]
  - [CogenTestTest_socket cogen.test.test_socket]
  - [CogenTestTest_timer cogen.test.test_timer]
  - [CogenWeb cogen.web]
  - [CogenWebAsync cogen.web.async]
  - [CogenWebWsgi cogen.web.wsgi]
==== Classes: [CogenCoreCoroutineCoroutine cogen.core.coroutine.Coroutine] ====
==== Functions: [#coroutine coroutine] ====

= Module: coroutine =



== Classes ==

=== Coroutine ===

We need a coroutine wrapper for generators and function alike because
we want to run functions that don'self return generators just like a 
coroutine 



== Functions ==

=== coroutine ===
signature: coroutine(func)

A decorator function for generators.
Example:

{{{
@coroutine
def plain_ol_generator():
    yield bla
    yield bla
    ...
}}}