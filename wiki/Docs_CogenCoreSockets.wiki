#summary cogen.core.sockets Documentation for trunk
#labels Documentation

==== Parent module: [Docs_CogenCore cogen.core] ====
==== Classes: [Docs_CogenCoreSocketsAccept Accept] [Docs_CogenCoreSocketsConnect Connect] [Docs_CogenCoreSocketsRead Read] [Docs_CogenCoreSocketsReadall ReadAll] [Docs_CogenCoreSocketsReadline ReadLine] [Docs_CogenCoreSocketsSendfile SendFile] [Docs_CogenCoreSocketsSocket Socket] [Docs_CogenCoreSocketsWrite Write] [Docs_CogenCoreSocketsWriteall WriteAll] ====

= Module: sockets =
Socket-only coroutine operations and `Socket` wrapper.

== Classes ==

=== [Docs_CogenCoreSocketsAccept Accept] ===
Returns a (conn, addr) tuple when the operation completes.


=== [Docs_CogenCoreSocketsConnect Connect] ===
Connect to the given `addr` using `sock`.


=== [Docs_CogenCoreSocketsRead Read] ===
`len` is max read size, BUT, if if there are buffers from ReadLine 
return them first.
Example usage:

{{{
yield sockets.Read(socket_object, buffer_length)
}}}


=== [Docs_CogenCoreSocketsReadall ReadAll] ===
Run this operator till we've read `len` bytes.


=== [Docs_CogenCoreSocketsReadline ReadLine] ===
Run this operator till we read a newline (\n) or we have a overflow.

`len` is the max size for a line


=== [Docs_CogenCoreSocketsSendfile SendFile] ===
Uses underling OS sendfile call or a regular memory copy operation if 
there is no sendfile.
You can use this as a WriteAll if you specify the length.
Usage:
    
{{{
yield sockets.SendFile(, , 0) 
    # will send till send operations return 0
    
yield sockets.SendFile(, , 0, blocksize=0)
    # there will be only one send operation (if successfull)
    # that meas the whole file will be read in memory if there is 
    #no sendfile
    
yield sockets.SendFile(, , 0, )
    # this will hang if we can't read  bytes
    #from the file
}}}


=== [Docs_CogenCoreSocketsSocket Socket] ===
This class just inherits good old socket.socket, sets nonblocking mode and
add some attributes we need:
  * rl_pending - for unchecked for linebreaks buffer
  * rl_list - for checked for linebreaks buffers
  * rl_list_sz - a cached size of the summed sizes of rl_list buffers


=== [Docs_CogenCoreSocketsWrite Write] ===
Write the buffer to the socket and return the number of bytes written.


=== [Docs_CogenCoreSocketsWriteall WriteAll] ===
Run this operation till all the bytes have been written.



