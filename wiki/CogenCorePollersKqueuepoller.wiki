#summary cogen.core.pollers.KQueuePoller Documentation
#labels Documentation

==== Parent: [CogenCorePollers cogen.core.pollers] ====
==== Methods: [#add add] [#handle_errored handle_errored] [#remove remove] [#run run] [#run_once run_once] [#run_operation run_operation] [#run_or_add run_or_add] [#waiting_op waiting_op] ====
==== Attributes: [#RESOLUTION RESOLUTION] [#mRESOLUTION mRESOLUTION] [#nRESOLUTION nRESOLUTION] ====

= Class: KQueuePoller =



== Methods ==

=== add ===
signature: add(self, op, coro)

~ @debug(0)    


=== handle_errored ===
signature: handle_errored(self, desc)



=== remove ===
signature: remove(self, op, coro)

~ @debug(0)


=== run ===
signature: run(self, timeout=0)

Run a poller loop and return new socket events. Timeout is a timedelta 
object, 0 if active coros or None. 

kqueue timeout param is a integer number of nanoseconds (seconds/10**9).

=== run_once ===
signature: run_once(self, fdesc, waiting_ops)

Run a operation, remove it from the poller and return the result. 
Called from the main poller loop. 

=== run_operation ===
signature: run_operation(self, op)

Run the socket op and return result or exception. 

=== run_or_add ===
signature: run_or_add(self, op, coro)

Perform operation or add the operation in the poller if socket isn't
ready. Called from the scheduller. 

=== waiting_op ===
signature: waiting_op(self, testcoro)




== Attributes ==

=== RESOLUTION ===


{{{0.02}}}

=== mRESOLUTION ===


{{{20.0}}}

=== nRESOLUTION ===


{{{20000000.0}}}

