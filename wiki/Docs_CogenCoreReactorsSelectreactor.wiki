#summary cogen.core.reactors.SelectReactor Documentation for trunk
#labels Documentation

==== Parent module: [Docs_CogenCoreReactors cogen.core.reactors] ====
==== Methods: [#__init__ __init__] [#__len__ __len__] [#add add] [#handle_errored handle_errored] [#handle_events handle_events] [#remove remove] [#run run] [#run_once run_once] [#run_operation run_operation] [#run_or_add run_or_add] [#waiting_op waiting_op] ====

= Class: `SelectReactor` =



== Methods ==

=== {{{__init__}}} ===
signature: {{{__init__(self, scheduler, resolution)}}}



=== {{{__len__}}} ===
signature: {{{__len__(self)}}}

Returns number of waiting operations registered in the reactor.

=== {{{add}}} ===
signature: {{{add(self, op, coro)}}}



=== {{{handle_errored}}} ===
signature: {{{handle_errored(self, desc, code=None)}}}

Handles descriptors that have errors.

=== {{{handle_events}}} ===
signature: {{{handle_events(self, ready, waiting_ops)}}}



=== {{{remove}}} ===
signature: {{{remove(self, op, coro)}}}



=== {{{run}}} ===
signature: {{{run(self, timeout=0)}}}

Run a reactor loop and return new socket events. Timeout is a timedelta 
object, 0 if active coros or None. 

select timeout param is a float number of seconds.

=== {{{run_once}}} ===
signature: {{{run_once(self, fdesc, waiting_ops)}}}

Run a operation, remove it from the reactor and return the result. 
Called from the main reactor loop. 

=== {{{run_operation}}} ===
signature: {{{run_operation(self, op, reactor=True)}}}

Run the socket op and return result or exception. 

=== {{{run_or_add}}} ===
signature: {{{run_or_add(self, op, coro)}}}

Perform operation and return result or add the operation in 
the reactor if socket isn't ready and return none. 
Called from the scheduller via SocketOperation.process. 

=== {{{waiting_op}}} ===
signature: {{{waiting_op(self, testcoro)}}}

Returns the registered operation for some specified coroutine.


